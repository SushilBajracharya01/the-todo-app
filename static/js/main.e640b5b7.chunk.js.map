{"version":3,"sources":["redux/actions.js","components/AddTodo.js","redux/actionTypes.js","redux/selectors.js","components/Todo.js","components/TodoList.js","constants.js","components/VisibilityFilters.js","TodoApp.js","serviceWorker.js","redux/reducers/todos.js","redux/reducers/visibilityFilter.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["nextTodoId","AddTodo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todo","handleChange","bind","assertThisInitialized","handleAddTodo","e","setState","target","value","addTodo","react_default","a","createElement","className","type","onChange","placeholder","onClick","React","Component","connect","content","payload","id","getTodosState","store","todos","getTodos","allIds","getTodoList","map","objectSpread","byIds","getTodoById","toggleTodo","concat","completed","visibilityFilter","allTodos","filter","getTodosByVisibilityFilter","_ref","length","components_Todo","key","VISIBILITY_FILTERS","ALL","INCOMPLETE","COMPLETED","activeFilter","toLowerCase","setFilter","keys","filterKey","currentFilter","components_AddTodo","components_TodoList","components_VisibilityFilters","Boolean","window","location","hostname","match","initialState","arguments","undefined","action","combineReducers","_action$payload","toConsumableArray","defineProperty","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducers","applyMiddleware","ReactDOM","render","es","src_TodoApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e640b5b7.chunk.js","sourcesContent":["import { ADD_TODO, TOGGLE_TODO, SET_FILTER } from './actionTypes';\r\n\r\nlet nextTodoId = 0;\r\n\r\nexport const addTodo = content => ({\r\n    type: ADD_TODO,\r\n    payload: {\r\n        id: ++nextTodoId,\r\n        content\r\n    }\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n    type: TOGGLE_TODO,\r\n    payload: { id }\r\n});\r\n\r\nexport const setFilter = filter => ({\r\n    type: SET_FILTER,\r\n    payload: {filter}\r\n})","import React from \"react\";\r\nimport {connect} from 'react-redux';\r\n\r\nimport { addTodo } from '../redux/actions';\r\n\r\nclass AddTodo extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todo: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleAddTodo = this.handleAddTodo.bind(this);\r\n    }\r\n\r\n    handleChange (e) {\r\n        this.setState({\r\n            todo: e.target.value\r\n        });\r\n        \r\n    }\r\n\r\n    handleAddTodo () {\r\n        //dispatches action to add todo\r\n        this.props.addTodo(this.state.todo);\r\n        //sets state back to empty string\r\n        this.setState({todo: ''})\r\n    }\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"form-group text-center\">\r\n        <h3 className=\"text-left\">Add Todos</h3>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control inputTodo_txt\"\r\n          onChange={this.handleChange}\r\n          value={this.state.todo}\r\n          placeholder=\"Enter your Todo item\"\r\n        />\r\n        <input\r\n          type=\"button\"\r\n          value=\"Add TODO\"\r\n          className=\"addTodo_btn btn my-1\"\r\n          onClick={this.handleAddTodo}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { addTodo })(AddTodo);\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const SET_FILTER = \"SET_FILTER\";","\r\nexport const getTodosState = store => store.todos;\r\n\r\nexport const getTodoList = store =>\r\n  getTodosState(store) ? getTodosState(store).allIds : [];\r\n\r\nexport const getTodoById = (store, id) =>\r\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {};\r\n\r\nexport const getTodos = store =>\r\n  getTodoList(store).map(id => getTodoById(store, id));\r\n\r\n\r\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\r\n  const allTodos = getTodos(store);\r\n  switch (visibilityFilter) {\r\n    case 'COMPLETED':\r\n      return allTodos.filter(todo => todo.completed);\r\n    case 'INCOMPLETE':\r\n      return allTodos.filter(todo => !todo.completed);\r\n    case 'ALL':\r\n    default:\r\n      return allTodos;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { toggleTodo } from '../redux/actions';\r\n\r\nconst Todo = (props) => {\r\n    function ToggleTodo (id) {\r\n        props.toggleTodo(id);\r\n    }\r\n    const { todo } = props;\r\n  return (\r\n    <li\r\n      className={`todo-item  ${todo.completed? \"completed\" : \"\" }`}\r\n      onClick={()=>ToggleTodo(todo.id)/** dispatches action to toggle todo */}\r\n    >\r\n      {todo && todo.completed ? \"ðŸ‘Œ\" : \"ðŸ‘‹\"} {todo.content}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default connect(null, { toggleTodo })(Todo);\r\n","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { getTodosByVisibilityFilter } from '../redux/selectors';\r\nimport Todo from './Todo';\r\n\r\n\r\nconst TodoList = ({todos}) => {\r\n  return (\r\n    <div className=\"form-group text-center\">\r\n      <h3 className=\"text-left\">Todo List</h3>\r\n      <ul className=\"todo-list\">\r\n        {todos && todos.length\r\n          ? todos.map((todo) => {\r\n              return <Todo key={`todo-${todo.id}`} todo={todo} />;\r\n            })\r\n          : \"ðŸŽŠNo Todos, Yay!ðŸŽŠ\"}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    const { visibilityFilter } = state;\r\n    const todos = getTodosByVisibilityFilter(state, visibilityFilter);\r\n\r\n    return { todos }\r\n  }\r\n\r\nexport default connect(mapStateToProps)(TodoList);\r\n","export const VISIBILITY_FILTERS = {\r\n    ALL: \"all\",\r\n    INCOMPLETE: \"incomplete\",\r\n    COMPLETED: \"completed\",\r\n}","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { setFilter } from '../redux/actions';\r\nimport { VISIBILITY_FILTERS } from \"../constants\";\r\n\r\nconst VisibilityFilters = (props) => {\r\n    const { setFilter, activeFilter } = props;\r\n  return (\r\n    <div className=\"p-2 visibility-filters\">\r\n      {Object.keys(VISIBILITY_FILTERS).map(filterKey => {\r\n        const currentFilter = VISIBILITY_FILTERS[filterKey];\r\n        return (\r\n          <span\r\n            className={`m-1 m-sm-5 filter ${currentFilter === activeFilter && \"filter--active\"}`}\r\n            key={`visibility-filter-${currentFilter}`}\r\n            onClick={() => {setFilter(filterKey)} /** waiting for setFilter handler*/}\r\n          >\r\n            {currentFilter}\r\n          </span>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    let filter = state.visibilityFilter;\r\n    let activeFilter = filter.toLowerCase();\r\n    return { activeFilter}\r\n}\r\n\r\nexport default connect(mapStateToProps, { setFilter })(VisibilityFilters);\r\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './TodoApp.css';\nimport AddTodo from './components/AddTodo';\nimport TodoList from './components/TodoList';\nimport VisibilityFilters from './components/VisibilityFilters';\n\n\n\nfunction TodoApp(props) {\n  return (\n    <div className=\"todo-app container\">\n      <div className=\"todo-header py-3 pl-4\">\n        <h1>THE TODO APP</h1>\n      </div>\n      <div className=\"todo-body py-4 pl-5\">\n        \n        <AddTodo />\n        <TodoList />\n\n      </div>\n      <VisibilityFilters />\n\n    </div>\n  );\n}\n\n\n\nexport default connect()(TodoApp);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_TODO, TOGGLE_TODO } from '../actionTypes';\r\n\r\nconst initialState = {\r\n    allIds: [],\r\n    byIds: {}\r\n}\r\n\r\nexport const todos = ( state=initialState, action ) => {\r\n    switch(action.type) {\r\n        case ADD_TODO: {\r\n            const { id, content } = action.payload;\r\n            return {\r\n                ...state,\r\n                allIds: [...state.allIds, id],\r\n                byIds: {\r\n                    ...state.byIds,\r\n                    [id]: {\r\n                        content,\r\n                        completed: false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        case TOGGLE_TODO: {\r\n            const { id } = action.payload;\r\n            return {\r\n                ...state,\r\n                byIds: {\r\n                    ...state.byIds,\r\n                    [id]: {\r\n                        ...state.byIds[id],\r\n                        completed: !state.byIds[id].completed\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_FILTER } from '../actionTypes';\r\nimport { VISIBILITY_FILTERS } from '../../constants';\r\n\r\nconst initialState = VISIBILITY_FILTERS.ALL;\r\n\r\nconst visibilityFilter = (state=initialState, action) => {\r\n    switch(action.type) {\r\n        case SET_FILTER: {\r\n            return action.payload.filter;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default visibilityFilter;","import { combineReducers } from 'redux';\r\n\r\nimport { todos } from './todos';\r\nimport visibilityFilter from './visibilityFilter'\r\n\r\nexport default combineReducers({todos, visibilityFilter });\r\n","\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducers from './reducers';\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducers, composeEnhancers(applyMiddleware()));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport TodoApp from './TodoApp';\nimport * as serviceWorker from './serviceWorker';\n\n//Redux Imports\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(<Provider store={store}><TodoApp /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}